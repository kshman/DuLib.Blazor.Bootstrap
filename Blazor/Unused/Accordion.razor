@inherits ComponentContent

<div class="@CssClass" id="@Id" @attributes="UserAttrs">
	<CascadingValue Value="this" IsFixed="true">
		@ChildContent
	</CascadingValue>
</div>

@code {
	/// <summary>플래시 모양 (외곽선이 없는거 같음)</summary>
	[Parameter] public bool Flush { get; set; }
	/// <summary>따로 따로 움직임</summary>
	[Parameter] public bool AlwaysOpen { get; set; }
	/// <summary>
	/// 열림 설정하거나 얻기<br/>
	/// 얻을 때는 부정확하니깐 <see cref="AccordionItem.OnActive"/> 쪽을 사용하는게 좋음
	/// </summary>
	/// <remarks>정확히 하려면 자바스크립트로 속성 체크를 해야할 듯</remarks>
	[Parameter] public string? Active { get; set; }

	/// <summary>열림 이벤트</summary>
	[Parameter] public EventCallback<string?> ActiveChanged { get; set; }

	//
	protected override string CssName => "accordion";

	//
	protected override void OnComponentClass(CssCompose css) =>
		css.Add(Flush, "accordion-flush");

	// 자식한테 호출 받는거라 걍 무조건 클릭일 때 오게 됨
	// 자식 체크 몬함. AlwaysOpen 이 아니면 expanded는 무의미
	internal async Task SetActiveAsync(string id, bool expanded)
	{
		if (AlwaysOpen)
		{
			if (expanded && Active != id)
			{
				Active = id;
				await InvokeActiveChanged(id);
			}
		}
		else
		{
			if (Active == id)
				return;

			Active = id;
			await InvokeActiveChanged(id);

			StateHasChanged();
		}
	}

	//
	protected virtual Task InvokeActiveChanged(string? id) => ActiveChanged.InvokeAsync(id);

	//
	internal string? GetIdForBsParent() =>
		AlwaysOpen ? null : $"#{Id}";
}
