@inherits ComponentParent

<div class="@CssClass" @attributes="UserAttrs">
	<h2 class="accordion-header">
		<button class="@CssCompose.Join("accordion-button", Active.IfFalse("collapsed"))"
				type="button"
				data-bs-toggle="collapse"
				data-bs-target="#@Id"
				aria-expanded="@Active.ToBootStrap()"
				aria-controls="#@Id"
				@onclick="HandleOnClickAsync">
			@if (Display is not null)
			{
				@Display
			}
			else
			{
				<span>@Title</span>
			}
		</button>
	</h2>
	<div class="@CssCompose.Join("accordion-collapse", "collapse", Active.IfTrue("show"))"
		 data-bs-parent="@Group?.GetIdForBsParent()"
		 id="@Id">
		<div class="accordion-body">
			@(Content ?? ChildContent)
		</div>
	</div>
</div>

@code {
	[CascadingParameter] public Accordion? Group { get; set; }

	/// <summary>타이틀 대신 쓰는 헤더 블럭</summary>
	[Parameter] public RenderFragment? Display { get; set; }
	/// <summary>콘텐트 블럭</summary>
	[Parameter] public RenderFragment? Content { get; set; }

	/// <summary>표시 타이틀</summary>
	[Parameter] public string? Title { get; set; }
	/// <summary>펼쳐놓기 상태. <c>이 값으로 확장 여부를 알면 안된다!</c></summary>
	[Parameter] public bool Active { get; set; }

	/// <summary>마우스가 눌림</summary>
	[Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
	/// <summary>펼쳐지고 닫힐 때</summary>
	[Parameter] public EventCallback<ExpandedEventArgs> OnActive { get; set; }

	//
	protected override string CssName => "accordion-item";

	//
	private bool _internal_expanded;

	//
	protected override void OnParametersSet()
	{
		if (Group is null)
			ThrowSupp.InsideComponent(nameof(AccordionItem), nameof(Accordion));

		if (Active is false && Group!.Active == Id)
			Active = true;
	}

	//
	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
			_internal_expanded = Active;
	}

	//
	protected async Task HandleOnClickAsync(MouseEventArgs e)
	{
		await InvokeOnClickAsync(e);

		_internal_expanded = !_internal_expanded;

		await Group!.SetActiveAsync(Id, _internal_expanded);
		await InvokeOnActiveAsync(new ExpandedEventArgs(Id, _internal_expanded));
	}

	//
	protected virtual Task InvokeOnClickAsync(MouseEventArgs e) => OnClick.InvokeAsync(e);
	protected virtual Task InvokeOnActiveAsync(ExpandedEventArgs e) => OnActive.InvokeAsync(e);
}
