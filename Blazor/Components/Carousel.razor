@inherits AbstractCarousel
@inject IJSRuntime JS

<CascadingValue Value="this" IsFixed="true">
	@ChildContent
</CascadingValue>

<div @ref="Reference"
	 class="@CssClass"
	 data-bs-interval="@(Interval == 0 ? "false" : Interval)"
	 data-bs-touch="@Touch.ToBootStrap()"
	 id="@Id"
	 @attributes="UserAttrs">
	@if (Indicators)
	{
		<div class="carousel-indicators">
			@for (var i = 0; i < _items.Count; i++)
			{
				if (_items[i] == _current)
				{
					<button type="button" data-bs-target="#@Id" data-bs-slide-to="@i" aria-label="Slide @i" class="active" aria-current="true">
					</button>
				}
				else
				{
					<button type="button" data-bs-target="#@Id" data-bs-slide-to="@i" aria-label="Slide @i">
					</button>
				}
			}
		</div>
	}
	<div class="carousel-inner">
		@foreach (var crs in _items)
		{
			<div class="@CssCompose.Join(crs.CssClass, (crs == _current).IfTrue("active"))" id="@crs.Id" @attributes="crs.UserAttrs">
				@crs.ChildContent
			</div>
		}
	</div>
	@if (Controls)
	{
		<button class="carousel-control-prev" type="button" data-bs-target="#@Id" data-bs-slide="prev" id="@($"{Id}_PR")">
			<span class="carousel-control-prev-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Previous</span>
		</button>
		<button class="carousel-control-next" type="button" data-bs-target="#@Id" data-bs-slide="next" id="@($"{Id}_NE")">
			<span class="carousel-control-next-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Next</span>
		</button>
	}
</div>

@code {
	/// <summary>슬라이드 대신 페이드로 표시</summary>
	[Parameter] public bool Fade { get; set; }
	/// <summary>하단 선택 표시</summary>
	[Parameter] public bool Indicators { get; set; }
	/// <summary>좌우 이동 컨트롤 표시</summary>
	[Parameter] public bool Controls { get; set; } = true;
	/// <summary>슬라이드 변경 시간 밀리초 단위(1초=1000밀리초)<br/>기본값은 5000 (5초)</summary>
	[Parameter] public int? Interval { get; set; } = 5000;
	/// <summary>터치 지원 여부</summary>
	[Parameter] public bool Touch { get; set; } = true;
	/// <summary>마우스가 올라가 있을때 중지 여부</summary>
	[Parameter] public bool Hover { get; set; } = true;
	/// <summary>플레이 방법, 기본은 처음부터 재생</summary>
	[Parameter] public CarouselPlay Play { get; set; }

	/// <summary>이벤트: 슬라이드가 시작될 때</summary>
	[Parameter] public EventCallback<CarouselSlideEventArgs> OnBeginSlide { get; set; }
	/// <summary>이벤트: 슬라이드가 끝날 때</summary>
	[Parameter] public EventCallback<CarouselSlideEventArgs> OnEndSlide { get; set; }

	//
	protected override string CssName => "carousel slide"; // slide 까지가 포함됨

	//
	protected ElementReference Reference { get; set; }

	//
	private DotNetObjectReference<Carousel>? _drf;

	//
	protected override void OnComponentClass(CssCompose css)
	{
		css.Add(Fade, "carousel-fade");
	}

	//
	protected override async Task OnAfterFirstRenderAsync()
	{
		var options = new Dictionary<string, object>
			{
				["ride"] = Play switch
				{
					CarouselPlay.Auto => "carousel",
					CarouselPlay.True => true,
					CarouselPlay.False or
					_ => false
				},
				["pause"] = Hover ? "hover" : false,
			};

		_drf ??= DotNetObjectReference.Create(this);
		await JS.InvokeVoidAsync("DUCARS.init", Reference, _drf, options);
	}

	//
	protected override async ValueTask DisposeAsyncCore()
	{
		try
		{
			await JS.InvokeVoidAsync("DUCARS.disp", Reference);
		}
		catch (JSDisconnectedException)
		{
			// 그럴 수도 있음
		}

		_drf?.Dispose();
	}

	//
	public async Task MoveToAsync(int index) =>
		await JS.InvokeVoidAsync("DUCARS.to", Reference, index);

	//
	public async Task MovePreviousAsync() =>
		await JS.InvokeVoidAsync("DUCARS.prev", Reference);

	//
	public async Task MoveNextAsync() =>
		await JS.InvokeVoidAsync("DUCARS.next", Reference);

	//
	public async Task CycleAsync() =>
		await JS.InvokeVoidAsync("DUCARS.cycle", Reference);

	//
	public async Task PauseAsync() =>
		await JS.InvokeVoidAsync("DUCARS.pause", Reference);

	// 반드시 public
	[JSInvokable("ivk_cars_bs")]
	public Task InternalHandleBeginSlideAsync(int from, int to, bool isLeft) =>
		InvokeOnBeginSlideAsync(new CarouselSlideEventArgs(from, to, isLeft));

	// 반드시 public
	[JSInvokable("ivk_cars_es")]
	public Task InternalHandleEndSlideAsync(int from, int to, bool isLeft) =>
		InvokeOnEndSlideAsync(new CarouselSlideEventArgs(from, to, isLeft));

	//
	protected virtual Task InvokeOnBeginSlideAsync(CarouselSlideEventArgs e) => OnBeginSlide.InvokeAsync(e);
	protected virtual Task InvokeOnEndSlideAsync(CarouselSlideEventArgs e) => OnEndSlide.InvokeAsync(e);
}
