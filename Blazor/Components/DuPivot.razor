@inherits DuComponentParent
@implements IDisposable

<button @ref="RootElement"
        class="@CssClass"
        type="button"
        role="tab"
		aria-selected="@Selected.ToBootStrap()"
        aria-label="@AriaLabel"
        tabindex="@(Selected ? 0 : -1)"
		id="@Id"
		@attributes="UserAttrs"
        @onclick="HandleOnClick">
	@if (Header is not null)
	{
		<span>@Header</span>
	}
	else
	{
		<span>@Title</span>
	}
</button>

@code {
	/// <summary>피벗 그룹</summary>
	[CascadingParameter] public DuGroupPivot? Group { get; set; }

	/// <summary>타이틀 <see cref="Header"/> </summary>
	[Parameter] public string? Title { get; set; }
	/// <summary>부트스트랩 ARIA 라벨</summary>
	[Parameter] public string? AriaLabel { get; set; }

	/// <summary>헤더 <see cref="Title"/></summary>
	[Parameter] public RenderFragment? Header { get; set; }
	/// <summary>내용
	/// <see cref="Header"/>와 짝꿍<br/>이 내용이 있을 경우,
	/// 태그 밖 <see cref="DuComponentParent.ChildContent"/>는 처리하지 않는다
	/// </summary>
	[Parameter] public RenderFragment? Content { get; set; }

	public bool Selected { get; set; }

	protected override string RootClass => "hpvt-item";

	//
	protected override void OnComponentInitialized()
	{
		Group?.AddPivot(this);
	}

	//
	protected override void OnComponentClass(CssSupp css)
	{
		css.Register(() => Selected.IfTrue("hpvt-sel"));
	}

	//
	public void SetSelected(bool selected)
	{
		Selected = selected;
		StateHasChanged();
	}

	//
	private void HandleOnClick()
	{
		if (Disabled is false)
			Group?.SelectPivot(this);
	}

	//
	public void Dispose()
	{
		Disposing(true);
		GC.SuppressFinalize(this);
	}

	//
	protected virtual void Disposing(bool disposing)
	{
		if (!disposing)
			return;

		Group?.RemovePivot(this);
	}
}
