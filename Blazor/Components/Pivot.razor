@inherits ComponentContainer

<CascadingValue Value="this" IsFixed="true">
	@ChildContent
</CascadingValue>

<div role="toolbar" class="@CssClass" id="@Id" @attributes="UserAttrs">
	<div class="hpvt-hdr" role="tablist">
		@foreach (var item in Items)
		{
			var pv = (ContentItem)item;
			var current = pv == SelectedItem;
			<button type="button" role="tab"
				class="@CssCompose.Join("hpvt-item", current.IfTrue("hpvt-sel"), pv.CssClass)"
				tabindex="@(current ? 0 : -1)"
				aria-selected="@current.ToBootStrap()"
				id="@Id" @attributes="UserAttrs"
				@onclick="async () => await HandleOnClickAsync(pv)">
				@pv.Text
				@pv.Display
			</button>
		}
	</div>

	@if (PivotOnly is false)
	{
		var pv = (ContentItem?)SelectedItem;
		<div role="tabpanel" class="hpvt-ctx" aria-hidden="false" aria-labelledby="@Id">
			@(pv?.Content ?? pv?.ChildContent)
		</div>
	}
</div>

@code {
	[Parameter] public ComponentOverflow Overflow { get; set; }
	[Parameter] public ComponentPosition Position { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public PivotLayout Layout { get; set; }
	[Parameter] public bool PivotOnly { get; set; }

	//
	protected override string CssName => "hpvt";

	//
	protected override void OnComponentClass(CssCompose css)
	{
		css
			.Add(Size switch
			{
				ComponentSize.Medium or
				ComponentSize.Small => "hpvt-nm",
				ComponentSize.Large => "hpvt-lg",
				_ => null
			})
			.Add(Layout switch
			{
				PivotLayout.Flat => "hpvt-lnk",
				PivotLayout.Box => "hpvt-box",
				_ => null
			})
			.Add(Overflow switch
			{
				ComponentOverflow.None => null,
				ComponentOverflow.Menu => null,
				ComponentOverflow.Scroll => "hpvt-scrl",
				_ => null
			})
			.Add(Position switch
			{
				ComponentPosition.Top => "ff-column",
				ComponentPosition.Right => "ff-row-reverse",
				ComponentPosition.Bottom => "ff-column-reverse",
				ComponentPosition.Left => "ff-row",
				_ => null
			});
	}

	//
	protected Task HandleOnClickAsync(ContentItem pivot) =>
		SelectItemAsync(pivot);
}
