@inherits AbstractPivot

<CascadingValue Value="this" IsFixed="true">
	@ChildContent
</CascadingValue>

<div role="toolbar" class="@CssClass" id="@Id" @attributes="UserAttrs">
	<div class="hpvt-hdr" role="tablist">
		@foreach (var pv in _items)
		{
			<button type="button" role="tab" class="@pv.CssClass" aria-selected="@((pv == _current).ToBootStrap())" tabindex="@(pv == _current ? 0 : -1)" id="@Id" @attributes="UserAttrs"
				@onclick="async () => await HandleOnClickAsync(pv)">
				@if (pv.Display is not null)
				{
					<span>@pv.Display</span>
				}
				else
				{
					<span>@pv.Title</span>
				}
			</button>
		}
	</div>

	@if (TitleOnly is false)
	{
		<div role="tabpanel" class="hpvt-ctx" aria-hidden="false" aria-labelledby="@Id">
			@(_current?.Content ?? _current?.ChildContent)
		</div>
	}
</div>

@code {
	[Parameter] public ComponentOverflow Overflow { get; set; }
	[Parameter] public ComponentPosition Position { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public PivotLayout Layout { get; set; }

	[Parameter] public bool TitleOnly { get; set; }

	//
	protected override string CssName => "hpvt";

	//
	protected override void OnComponentClass(CssCompose css)
	{
		css
			.Add(Size switch
			{
				ComponentSize.Medium or
				ComponentSize.Small => "hpvt-nm",
				ComponentSize.Large => "hpvt-lg",
				_ => null
			})
			.Add(Layout switch
			{
				PivotLayout.Flat => "hpvt-lnk",
				PivotLayout.Box => "hpvt-box",
				_ => null
			})
			.Add(Overflow switch
			{
				ComponentOverflow.None => null,
				ComponentOverflow.Menu => null,
				ComponentOverflow.Scroll => "hpvt-scrl",
				_ => null
			})
			.Add(Position switch
			{
				ComponentPosition.Top => "ff-column",
				ComponentPosition.Right => "ff-row-reverse",
				ComponentPosition.Bottom => "ff-column-reverse",
				ComponentPosition.Left => "ff-row",
				_ => null
			});
	}

	//
	protected override Task OnItemAddedAsync(PivotItem item)
	{
		if (item == _current)
			item.Selected = true;

		return Task.CompletedTask;
	}

	//
	protected override Task<bool> OnItemSelectedAsync(PivotItem? item, PivotItem? previous)
	{
		if (previous is not null)
			previous.Selected = false;

		if (item is not null)
			item.Selected = true;

		return Task.FromResult(true);
	}

	//
	protected Task HandleOnClickAsync(PivotItem pivot) =>
		SelectItemAsync(pivot);
}
