@inherits DuComponentParent
@implements IDisposable

<button @ref="RootElement"
        @attributes="UserAttributes"
        style="@CssStyle.Result"
        class="@CssClass.Result"
        type="button"
        role="tab"
        id="@Id"
        aria-selected="@(Selected ? "true" : "false")"
        aria-label="@AriaLabel"
        tabindex="@(Selected ? 0 : -1)"
        onclick="HandleOnClick">
    @if (Header is not null)
    {
        <span>@Header</span>
    }
    else
    {
        <span>@Title</span>
    }
</button>

<div @ref="RootElement"
     @attributes="UserAttributes"
     style="@CssStyle.Result"
     class="@CssClass.Result">
    @ChildContent
</div>

@code {
    [CascadingParameter] public DuGroupTab? Group { get; set; }

    [Parameter] public string? AriaLabel { get; set; }
    [Parameter] public string? Title { get; set; }

    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Content { get; set; }

    public bool Selected
    {
        get => _selected;
        set
        {
            if (value != _selected)
            {
                _selected = value;
                CssClass.Invalidate();
            }
        }
    }

    protected override string RootClass => RootClasses.tab_item;

    private bool _selected;
    private bool _disposed;

    //
    protected override void OnInitialized()
    {
        Group?.AddTab(this);

        base.OnInitialized();
    }

    //
    protected override void OnComponentClass()
    {
        CssClass
            .Add(() => Selected.IfTrue(RootClasses.tab_sel));
    }

    //
    public void SetSelected(bool selected)
    {
        Selected = selected;
        StateHasChanged();
    }

    //
    private void HandleOnClick()
    {
        if (Enabled)
            Group?.SelectTab(this);
    }

    //
    public void Dispose()
    {
        if (_disposed)
            return;

        Group?.RemoveTab(this);

        _disposed = true;
    }
}
