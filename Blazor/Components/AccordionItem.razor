@inherits ComponentParent

<div @ref="RootElement"
	 class="@CssClass"
	 @attributes="UserAttrs">
	<h2 class="accordion-header">
		<button class="@CssCompose.Join("accordion-button", Expanded.IfFalse("collapsed"))"
				type="button"
				data-bs-toggle="collapse"
				data-bs-target="#@Id"
				aria-expanded="@Expanded.ToBootStrap()"
				aria-controls="#@Id"
				@onclick="HandleOnClickAsync">
			@if (Header is not null)
			{
				@Header
			}
			else
			{
				<span>@Title</span>
			}
		</button>
	</h2>
	<div class="@CssCompose.Join("accordion-collapse", "collapse", Expanded.IfTrue("show"))"
		 data-bs-parent="@Group?.GetIdForBsParent()"
		 id="@Id">
		<div class="accordion-body">
			@(Content ?? ChildContent)
		</div>
	</div>
</div>

@code {
	[CascadingParameter] public Accordion? Group { get; set; }

	/// <summary>타이틀 대신 쓰는 헤더 블럭</summary>
	[Parameter] public RenderFragment? Header { get; set; }
	/// <summary>콘텐트 블럭</summary>
	[Parameter] public RenderFragment? Content { get; set; }

	/// <summary>표시 타이틀</summary>
	[Parameter] public string? Title { get; set; }
	/// <summary>펼쳐놓기 상태. 이 값으로 확장 여부를 알면 안된다!</summary>
	/// <remarks>expand는 동사이므로 expanded가 명사</remarks>
	[Parameter] public bool Expanded { get; set; }

	/// <summary>마우스가 눌림</summary>
	[Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
	/// <summary>펼쳐지고 닫힐 때</summary>
	[Parameter] public EventCallback<AccordionExpandEvent> OnExpanded { get; set; }

	protected override string RootClass => "accordion-item";

	private bool _internal_expanded;

	//
	protected override void OnParametersSet()
	{
		if (Group is not null && Group.Expanded == Id && Expanded is false)
			Expanded = true;
	}

	//
	/// <inheritdoc />
	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
			_internal_expanded = Expanded;
	}

	//
	protected Task InvokeOnClickAsync(MouseEventArgs e) =>
		OnClick.InvokeAsync(e);

	//
	protected Task InvokeOnExpandedAsync(bool expanded) =>
		OnExpanded.InvokeAsync(new AccordionExpandEvent(Id, expanded));

	//
	private async Task HandleOnClickAsync(MouseEventArgs e)
	{
		await InvokeOnClickAsync(e);

		_internal_expanded = !_internal_expanded;

		if (Group is not null && !Group.AlwaysOpen)
		{
			if (_internal_expanded)
			{
				if (Group.Expanded != Id)
					await Group.SetExpandedAsync(Id);
			}
			else
			{
				if (Group.Expanded == Id)
					await Group.SetExpandedAsync(null);
			}
		}

		await InvokeOnExpandedAsync(_internal_expanded);
	}
}
