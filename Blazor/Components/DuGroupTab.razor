@inherits DuGroupBase

<div @ref="RootElement"
     @attributes="UserAttributes"
     style="@CssStyle.Result"
     class="@CssClass.Result"
     role="toolbar"
     aria-label="@AriaLabel"
     id="@Id">
    <CascadingValue Value="this" IsFixed="true">
        <div class="hdr" role="tablist">
            @ChildContent
        </div>
    </CascadingValue>
    @if (HeaderOnly is false)
    {
        <div class="ctx"
         role="tabpanel"
         aria-hidden="false"
         aria-labelledby="@Id">
            @(_selected?.Content ?? _selected?.ChildContent)
        </div>
    }
</div>

@code {
    [Parameter] public bool Flat { get; set; }
    [Parameter] public bool HeaderOnly { get; set; }
    [Parameter]
    public ComponentSize Size
    {
        get => _size;
        set
        {
            if (_size != value)
            {
                _size = value;
                CssClass.Invalidate();
            }
        }
    }
    [Parameter]
    public ComponentOverflow Overflow
    {
        get => _overflow;
        set
        {
            if (_overflow != value)
            {
                _overflow = value;
                CssClass.Invalidate();
            }
        }
    }
    [Parameter]
    public ComponentPosition Position
    {
        get => _position;
        set
        {
            if (_position != value)
            {
                _position = value;
                CssClass.Invalidate();
            }
        }
    }

    [Parameter] public string? AriaLabel { get; set; }

    [Parameter] public EventCallback<TabChangeEvent> OnTabChange { get; set; }

    protected override string RootClass => "tab";

    private List<DuTab> _tabs = new();
    private DuTab? _selected;

    private ComponentSize _size;
    private ComponentOverflow _overflow;
    private ComponentPosition _position;

    //
    protected override void OnComponentClass()
    {
        CssClass
            .Add(() => Size == ComponentSize.Large ? "tab-lg" : "tab-nm")
            .Add(() => Flat ? "tab-lnk" : "tab-box")
            .Add(() => (Overflow == ComponentOverflow.Scroll).IfTrue("tab-scrl"))
            .Add(() => Position switch
            {
                ComponentPosition.Top => "flex-flow-column",
                ComponentPosition.Right => "flex-flow-row-reverse",
                ComponentPosition.Bottom => "flex-flow-column-reverse",
                ComponentPosition.Left => "flex-flow-row",
                _ => null
            });
        ;
    }

    //
    public void AddTab(DuTab tab)
    {
        if (Enabled is false)
            tab.Enabled = false;

        if (_selected is null)
        {
            tab.SetSelected(true);

            _selected = tab;
            StateHasChanged();
        }

        _tabs.Add(tab);
    }

    //
    public void RemoveTab(DuTab tab)
    {
        // 근데 이거 해야함? 어짜피 dispose인데
        _tabs.Remove(tab);
    }

    //
    public async void SelectTab(DuTab tab)
    {
        var prev = _selected;

        _selected?.SetSelected(false);
        tab.SetSelected(true);

        _selected = tab;

        StateHasChanged();

        await InvokeOnLinkClick(new TabChangeEvent
            {
                Tab = tab,
                Previous = prev,
            });
    }

    //
    protected virtual Task InvokeOnLinkClick(TabChangeEvent tab) =>
        OnTabChange.InvokeAsync(tab);
}
