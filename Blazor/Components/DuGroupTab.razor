@inherits DuGroupBase

<CascadingValue Value="this" IsFixed="true">
	@ChildContent
</CascadingValue>

@{
	var orderedList = _tabs
		.Where(t => t.Visibility == ComponentVisibility.Visible)
		.OrderBy(t => t.Index).ToList();
}

<nav @ref="RootElement"
	 @attributes="UserAttrs"
	 style="@CssStyle.Result"
	 class="@CssClass.Result"
	 id="@Id">
	@foreach (var tab in orderedList)
	{
		<a role="button"
	   class="@CssClass.Combine(tab.CssClass.Result, (tab == _current).IfTrue(CssConsts.active))"
	   id="@tab.Id"
	   @onclick="async () => await HandleOnClickAsync(tab)">
			@if (tab.Header is not null)
			{
				@tab.Header
			}
			else
			{
				@tab.Title
			}
		</a>
	}
</nav>

@if (TitleOnly is false)
{
	<div class="tab-content">
		@foreach (var tab in orderedList)
		{
			<div class="@CssClass.Combine(RootNames.tab_pane, (tab == _current).IfTrue(CssConsts.active))">
				@(tab.Content ?? tab.ChildContent)
			</div>
		}
	</div>
}

@code {
	[Parameter] public bool TitleOnly { get; set; }
	[Parameter] public string? ActiveId { get; set; }

	[Parameter] public EventCallback<string?> ActiveIdChanged { get; set; }

	protected override string RootName => RootNames.tab;

	private readonly List<DuTab> _tabs = new();
	private DuTab? _current;

	//
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
			return;

		if (ActiveId.IsHave(true))
			await SelectTabByIdAsync(ActiveId);
		else if (_current is null)
		{
			var orderedList = _tabs
				.Where(t => t is { Enabled: true, Visibility: ComponentVisibility.Visible })
				.OrderBy(t => t.Index).ToList();

			if (orderedList.Count > 0)
				await SelectTabAsync(orderedList[0]);
		}
	}

	//
	public void AddTab(DuTab tab)
	{
		if (Enabled is false)
			tab.Enabled = false;

		_tabs.Add(tab);

		if (ActiveId is not null)
		{
			if (tab.Id == ActiveId)
				_ = SelectTabAsync(tab);
		}
		else if (_current is null && tab.Enabled)
		{
			_ = SelectTabAsync(tab);
		}
	}

	//
	public void RemoveTab(DuTab tab)
	{
		// 근데 이거 해야함? 어짜피 dispose인데
		_tabs.Remove(tab);
	}

	//
	private async Task SelectTabAsync(DuTab? tab)
	{
		if (tab == _current)
			return;

		_current = tab;

		if (tab is not null)
			await InvokeActiveIdChangedAsync(tab.Id);
	}

	//
	private Task SelectTabByIdAsync(string? id)
	{
		var tab = _tabs.FirstOrDefault(t => t.Id == id);
		return SelectTabAsync(tab);
	}

	//
	protected virtual Task InvokeActiveIdChangedAsync(string? id) =>
		ActiveIdChanged.InvokeAsync(id);

	//
	protected async Task HandleOnClickAsync(DuTab tab) =>
		await SelectTabAsync(tab);
}
