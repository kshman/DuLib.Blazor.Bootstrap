@inherits DuComponentParent

<div @ref="RootElement"
	 class="@CssClass"
	 id="@Id"
	 @attributes="UserAttrs">
	<CascadingValue Value="this" IsFixed="true">
		@ChildContent
	</CascadingValue>
</div>

@code {
	/// <summary>플래시 모양 (외곽선이 없는거 같음)</summary>
	[Parameter] public bool Flush { get; set; }
	/// <summary>따로 따로 움직임</summary>
	[Parameter] public bool AlwaysOpen { get; set; }
	/// <summary>
	/// 열림 설정하거나 얻기<br/>
	/// 얻을 때는 부정확하니깐 <see cref="DuAccordion.OnExpanded"/> 쪽을 사용하는게 좋음
	/// </summary>
	/// <remarks>정확히 하려면 자바스크립트로 속성 체크를 해야할 듯</remarks>
	[Parameter] public string? Expanded { get; set; }

	/// <summary>열림 이벤트</summary>
	[Parameter] public EventCallback<string?> ExpandedChanged { get; set; }

	protected override string RootClass => "accordion";

	//
	protected override async Task OnParametersSetAsync()
	{
		if (Expanded.IsHave(true))
			await SetExpandedByIdAsync(Expanded!);
	}

	//
	protected override void OnComponentClass(CssSupp css)
	{
		css.Add(Flush, "accordion-flush");
	}

	//
	internal async Task SetExpandedByIdAsync(string? id)
	{
		if (Expanded == id)
			return;

		Expanded = id;
		await InvokeExpandedChanged(id);

		StateHasChanged();
	}

	//
	protected virtual Task InvokeExpandedChanged(string? id) =>
		ExpandedChanged.InvokeAsync(id);

	//
	public string? GetIdForBsParent() =>
		AlwaysOpen ? null : $"#{Id}";
}
