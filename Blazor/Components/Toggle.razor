@inherits ComponentContent
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<Toggle> Logger

@if (Layout is ToggleLayout.None)
{
	@* 버튼먼저 만들고 *@
}
else
{
	<button @ref="_self"
		type="button"
		class="@CssClass"
		data-bs-toggle="dropdown"
		data-bs-auto-close="@AutoClose.ToCss()"
		aria-expanded="false"
		@attributes="@UserAttrs">
		@*aria-expanded="@((DropDown?.Expanded ?? false).ToBootStrap())"*@
		@Text
		@ChildContent
	</button>
}

@code {
	//[CascadingParameter] public NavBar? NavBar { get; set; }
	[CascadingParameter] public DropDown? DropDown { get; set; }

	[Parameter] public string? ToggleClass { get; set; }
	[Parameter] public ToggleLayout Layout { get; set; } = ToggleLayout.Button;
	[Parameter] public DropAutoClose AutoClose { get; set; }

	[Parameter] public ComponentColor Color { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public bool Outline { get; set; }
	[Parameter] public bool Caret { get; set; }

	[Parameter] public bool Split { get; set; } // 당분간 안만듬

	[Parameter] public string? Text { get; set; }

	[Parameter] public EventCallback<ExpandedEventArgs> OnExpanded { get; set; }

	//
	private ElementReference _self;
	private DotNetObjectReference<Toggle>? _drf;

	//
	protected override void OnComponentInitialized()
	{
		if (Split && Layout is not ToggleLayout.Button)
		{
			Logger.LogError($"{nameof(Split)}: Layout must be button when split mode");
			Layout = ToggleLayout.Button;
		}

		ThrowIf.ContainerIsNull(DropDown, this);
		ThrowIf.NotImplementedWithCondition<ToggleLayout>(Layout != ToggleLayout.None);
	}

	//
	protected override void OnComponentClass(CssCompose css)
	{
		if (Layout == ToggleLayout.Button)
		{
			css
				.Add("dropdown-toggle")
				.Add("btn")
				.Add(Color.ToButtonCss(Outline))
				.Add(Size.ToCss("btn"));
		}
		else
		{
			css.AddIf(Caret, "dropdown-toggle");
		}

		css
			.AddIf(Split, "dropdown-toggle-split")
			.Register(() => (DropDown?.Expanded ?? false).IfTrue("show"));
	}

	//
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
			return;

		_drf ??= DotNetObjectReference.Create(this);
		await JS.InvokeVoidAsync("DUDROP.init", _self, _drf);
	}

	//
	public async ValueTask DisposeAsync()
	{
		await DisposeAsyncCore().ConfigureAwait(false);
		GC.SuppressFinalize(this);
	}

	//
	protected virtual async ValueTask DisposeAsyncCore()
	{
		try
		{
			await JS.InvokeVoidAsync("DUDROP.disp", _self);
		}
		catch (JSDisconnectedException)
		{
		}

		_drf?.Dispose();
	}

	//
	[JSInvokable("ivk_drop_show")]
	public async Task InternalHandleShowAsync()
	{
		if (DropDown is not null)
			await DropDown.InternalExpandedChangedAsync(true);

		await InvokeOnExpandedAsync(new ExpandedEventArgs(Id, true));
	}

	//
	[JSInvokable("ivk_drop_hide")]
	public async Task InternalHandleHideAsync()
	{
		if (DropDown is not null)
			await DropDown.InternalExpandedChangedAsync(false);

		await InvokeOnExpandedAsync(new ExpandedEventArgs(Id, false));
	}

	//
	private Task InvokeOnExpandedAsync(ExpandedEventArgs e) => OnExpanded.InvokeAsync(e);
}
