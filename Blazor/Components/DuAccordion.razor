@inherits DuComponentParent

<div @ref="RootElement"
     @attributes="UserAttrs"
     style="@CssStyle.Result"
     class="@CssClass.Result">
	<h2 class="accordion-header">
		<button class="@CssClass.Combine("accordion-button", Expanded.IfFalse("collapsed"))"
		        type="button"
		        data-bs-toggle="collapse"
		        data-bs-target="#@Id"
		        aria-expanded="@(Expanded ? "true" : "false")"
				aria-controls="#@Id"
		        @onclick="HandleOnClick">
			@if (Header is not null)
			{
				@Header
			}
			else
			{
				<span>@Title</span>
			}
		</button>
	</h2>
	<div class="@CssClass.Combine("accordion-collapse", "collapse", Expanded.IfTrue("show"))"
		 data-bs-parent="@HasNoGroupId.IfFalse($"#{Group!.Id}")"
		 id="@Id">
		<div class="accordion-body">
			@(Content ?? ChildContent)
		</div>
	</div>
</div>

@code {
	[CascadingParameter]
	public DuGroupBase? Group { get; set; }

	/// <summary>타이틀 대신 쓰는 헤더 블럭</summary>
	[Parameter]
	public RenderFragment? Header { get; set; }

	[Parameter]
	public RenderFragment? Content { get; set; }

	/// <summary>표시 타이틀</summary>
	[Parameter]
	public string? Title { get; set; }

	/// <summary>펼쳐놓기 상태. 이 값으로 확장 여부를 알면 안된다!</summary>
	[Parameter]
	public bool Expanded { get; set; }

	/// <summary>마우스가 눌림</summary>
	[Parameter]
	public EventCallback<MouseEventArgs> OnClick { get; set; }

	/// <summary>펼쳐질 때</summary>
	[Parameter]
	public EventCallback<AccordionExpandEvent> OnExpandChanged { get; set; }

	protected override string RootName => RootNames.accordion_item;
	protected override string RootId => RootIds.accordion;

	private bool HasNoGroupId =>
		Group?.Id is null || Group is not DuGroupAccordion ga || ga.AlwaysOpen;

	private bool _internal_expanded;

	//
	protected override void OnParametersSet()
	{
		_internal_expanded = Expanded;
	}

	//
	protected Task InvokeOnClick(MouseEventArgs e)
	{
		return OnClick.InvokeAsync(e);
	}

	//
	protected Task InvokeOnExpandChanged(bool value)
	{
		return OnExpandChanged.InvokeAsync(new AccordionExpandEvent
		{
			Accordion = this,
			Expanded = value
		});
	}

	//
	private async Task HandleOnClick(MouseEventArgs e)
	{
		if (!Enabled)
			return;

		await InvokeOnClick(e);

		_internal_expanded = !_internal_expanded;
		await InvokeOnExpandChanged(_internal_expanded);
	}
}
