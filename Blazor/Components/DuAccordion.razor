@inherits DuComponentParent

<div @ref="RootElement"
	 @attributes="UserAttributes"
	 style="@CssStyle.Result"
	 class="@CssClass.Result">
	<h2 class="accordion-header">
		<div class="@(Expanded ? "accordion-button" : "accordion-button collapsed")"
			 role="button"
			 data-bs-toggle="collapse"
			 data-bs-target="#@_id"
			 aria-expanded="@(Expanded ? "true" : "false")"
			 aria-controls="#@_id"
			 @onclick="HandleOnClick">
			@if (Header is not null)
			{
				@Header(Expanded)
			}
			else
			{
				<span>@Title</span>
			}
		</div>
	</h2>
	@if (Group?.Id is not null || Group is not DuGroupAccordion ga || ga.Separated)
	{
		<div id="@_id"
		 class="accordion-collapse collapse @(Expanded ? "show" : string.Empty)">
			<div class="accordion-body">
				@ChildContent
			</div>
		</div>
	}
	else
	{
		<div id="@_id"
		 class="accordion-collapse collapse @(Expanded ? "show" : string.Empty)"
		 data-bs-parent="#@Group.Id">
			<div class="accordion-body">
				@ChildContent
			</div>
		</div>
	}
</div>

@code {
	[CascadingParameter] public DuGroupBase? Group { get; set; }

	/// <summary>타이틀 대신 쓰는 헤더 블럭</summary>
	[Parameter] public RenderFragment<bool>? Header { get; set; }
	/// <summary>표시 타이틀</summary>
	[Parameter] public string? Title { get; set; }
	/// <summary>펼쳐놓기 상태</summary>
	[Parameter] public bool Expanded { get; set; }

	/// <summary>마우스가 눌림</summary>
	[Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
	/// <summary>펼쳐질 때</summary>
	[Parameter] public EventCallback<bool> OnExpandedChanged { get; set; }

	protected override string RootClass => RootClasses.accordion_item;

	private string _id = $"{RootIds.accordion}_{TypeSupp.Increment}";

	//
	private async Task HandleOnClick(MouseEventArgs e)
	{
		if (!Enabled)
			return;

		await OnClick.InvokeAsync(e);

		Expanded = !Expanded;
		await OnExpandedChanged.InvokeAsync(Expanded);
	}
}
