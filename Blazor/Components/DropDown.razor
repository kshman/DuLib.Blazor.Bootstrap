@inherits ComponentContainer

<div class="@CssCompose.Join(Direction.ToCss(), BaseClass)" id="@Id"
	 @onfocusout="HandleFocusOutAsync" @onfocusout:stopPropagation="true">
	@if (Layout is DropLayout.Standard)
	{
		var idA = $"{Id}_A";
		<span role="button" class="@CssClass" id="@idA" @attributes="UserAttrs"
		      @onclick="HandleOnClickAsync">
			@(Header is not null ? Header : Title)
		</span>
		<ul class="@MenuClass" aria-labelledby="@idA">
			<CascadingValue Value="this" IsFixed="true">
				@ChildContent
			</CascadingValue>
		</ul>
	}
	else
	{
		var idButton = $"{Id}_B";
		<button type="button" class="@CssClass" id="@idButton" @attributes="UserAttrs"
		        @onclick="HandleOnClickAsync">
			@(Header is not null ? Header : Title)
		</button>
		<ul class="@MenuClass" aria-labelledby="@idButton">
			<CascadingValue Value="this" IsFixed="true">
				@ChildContent
			</CascadingValue>
		</ul>
	}
</div>

@code {
	[Parameter] public bool AutoClose { get; set; } = true;
	[Parameter] public DropLayout Layout { get; set; }
	[Parameter] public DropDirection Direction { get; set; }
	[Parameter] public DropAlignment Alignment { get; set; }
	[Parameter] public ComponentColor Color { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public bool Outline { get; set; }
	[Parameter] public string? Title { get; set; }
	[Parameter] public RenderFragment? Header { get; set; }

	[Parameter] public string? BaseClass { get; set; }
	[Parameter] public string? ListClass { get; set; }

	[Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
	[Parameter] public EventCallback<bool> OnShowHide { get; set; }
	[Parameter] public EventCallback<SelectEventArgs> OnSelect { get; set; }

	//
	public bool IsOpen { get; set; }
	public DropItem? SelectedItem { get; set; }

	//
	protected override string CssName => "dropdown-toggle";

	//
	private bool _handle_click;

	//
	protected override void OnComponentClass(CssCompose css)
	{
		if (Layout == DropLayout.Button)
		{
			css
				.Add("btn")
				.Add(Color.ToButtonCss(Outline))
				.Add(Size.ToCss("btn"));
		}
		else if (Layout == DropLayout.NavButton)
		{
			css
				//.Add("nav-link")
				.Add("nav-button");
		}
	}

	//
	public async Task ShowAsync()
	{
		IsOpen = true;
		await InvokeOnShowHideAsync(true);
	}

	//
	public async Task HideAsync()
	{
		await Task.Delay(100);
		IsOpen = false;
		await InvokeOnShowHideAsync(false);
	}

	//
	public async Task ToggleAsync()
	{
		IsOpen = !IsOpen;
		await InvokeOnShowHideAsync(IsOpen);
	}

	//
	internal async Task SetSelectedAsync(DropItem item)
	{
		SelectedItem = item;
		await HideAsync();
		await InvokeOnSelectAsync(new SelectEventArgs(item.Id, item.Title));
	}

	//
	protected async Task HandleFocusOutAsync()
	{
		if (AutoClose is false)
			return;
		if (IsOpen is false)
			return;
		await HideAsync();
	}

	//
	protected async Task HandleOnClickAsync(MouseEventArgs e)
	{
		if (_handle_click is false)
		{
			_handle_click = true;

			if (OnClick.HasDelegate)
				await InvokeOnClickAsync(e);

			await ToggleAsync();

			_handle_click = false;
		}
	}

	//
	protected virtual Task InvokeOnClickAsync(MouseEventArgs e) => OnClick.InvokeAsync(e);
	protected virtual Task InvokeOnShowHideAsync(bool e) => OnShowHide.InvokeAsync(e);
	protected virtual Task InvokeOnSelectAsync(SelectEventArgs e) => OnSelect.InvokeAsync(e);

	//
	private string MenuClass => CssCompose.Join(
		"dropdown-menu",
		Alignment.ToCss(),
		ListClass,
		IsOpen ? "show" : null)!;
}
