@inherits DropDownBase

<div class="@CssCompose.Join(Direction.ToCss(), ContainerClass)" id="@Id"
	 @onfocusout="HandleFocusOutAsync" @onfocusout:stopPropagation="true">
	@if (Layout is DropLayout.Standard)
	{
		<span role="button" class="@CssClass" @attributes="UserAttrs"
	   @onclick="HandleOnClickAsync">
			@if (Display is not null)
			{
				@Display
			}
			else
			{
				@Title
			}
		</span>
	}
	else
	{
		<button type="button" class="@CssClass" @attributes="UserAttrs"
			@onclick="HandleOnClickAsync">
			@if (Display is not null)
			{
				@Display
			}
			else
			{
				@Title
			}
		</button>
	}
	<ul class="@MenuCssClass">
		<CascadingValue Value="this" IsFixed="true">
			@if (Display is not null)
			{
				@List
			}
			else
			{
				@ChildContent
			}
		</CascadingValue>
	</ul>
</div>

@code {
	[Parameter] public DropLayout Layout { get; set; }
	[Parameter] public ComponentColor Color { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public bool Outline { get; set; }

	//
	protected override void OnComponentClass(CssCompose css)
	{
		switch (Layout)
		{
			case DropLayout.Button:
				css
					.Add("btn")
					.Add(Color.ToButtonCss(Outline))
					.Add(Size.ToCss("btn"));
				break;
			case DropLayout.Flat:
				css.Add("block-flat");
				break;
			case DropLayout.Standard:
			default:
				break;
		}
	}
}
