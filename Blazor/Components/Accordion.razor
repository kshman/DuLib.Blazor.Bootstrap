@inherits ComponentContainer

<CascadingValue Value="this" IsFixed="true">
	@ChildContent
</CascadingValue>

<div class="@CssClass" id="@Id" @attributes="@UserAttrs">
	@foreach (var item in Items)
	{
		var ctx = (ContentItem)item;
		var cur = AlwaysOpen ? ctx.Active : ctx == Current;
		<div class="@CssCompose.Join("accordion-item", ctx.CssClass)" @attributes="@ctx.UserAttrs">
			<h2 class="accordion-header">
				<button type="button" class="@CssCompose.Join("accordion-button", cur.IfFalse("collapsed"))"
					data-bs-toggle="collapse" data-bs-target="#@ctx.Id" aria-controls="@ctx.Id" aria-expanded="@cur.ToBootStrap()"
					@onclick="async () => await HandleOnClickItemAsync(ctx)">
					@if (ctx.Display is not null)
					{
						@ctx.Display
					}
					else
					{
						@ctx.Text
					}
				</button>
			</h2>
			<div class="@CssCompose.Join("accordion-collapse", "collapse", cur.IfTrue("show"))" data-bs-parent="@BsParentId" id="@ctx.Id">
				<div class="accordion-body">
					@(ctx.Content ?? ctx.ChildContent)
				</div>
			</div>
		</div>
	}
</div>

@code {
	[Parameter] public bool Flush { get; set; }
	[Parameter] public bool AlwaysOpen { get; set; }
	[Parameter] public int Transition { get; set; } = 150;

	[Parameter] public EventCallback<ExpandedEventArgs> OnExpanded { get; set; }

	//
	protected override string CssName => "accordion";
	protected override bool SelectFirst => false;

	//
	protected override void OnComponentClass(CssCompose css)
	{
		css.Add(Flush, "accordion-flush");
	}

	//
	protected override void OnAfterFirstRender()
	{
		if (Current is not null)
			((ContentItem)Current).Active = true;
	}

	//
	protected override void OnItemAdded(ComponentItem item)
	{
		if (item is not ContentItem)
			ThrowSupp.MustBeComponent(nameof(item), nameof(ContentItem));

		if (item == Current)
			((ContentItem)item).Active = true;
	}

	//
	private async Task HandleOnClickItemAsync(ContentItem item)
	{
		if (AlwaysOpen)
		{
			item.Active = !item.Active;
			await InvokeOnExpanded(item.Id, item.Active);
		}
		else
		{
			var cur = (ContentItem?)Current;
			if (cur is not null)
			{
				cur.Active = false;
				await InvokeOnExpanded(cur.Id, false);
			}

			if (item != cur)
			{
				item.Active = true;
				await InvokeOnExpanded(item.Id, true);
			}
		}

		await Task.Delay(Transition);

		SelectItem(item);
	}

	//
	private Task InvokeOnExpanded(string id, bool expanded) => 
		OnExpanded.InvokeAsync(new ExpandedEventArgs(id, expanded));

	//
	private string? BsParentId => AlwaysOpen ? null : $"#{Id}";
}
