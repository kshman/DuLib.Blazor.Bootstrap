@using System.Runtime.InteropServices
@inherits DuGrouParentPivot

<CascadingValue Value="this" IsFixed="true">
	@ChildContent
</CascadingValue>

<div @ref="RootElement"
	 class="@CssClass"
	 role="toolbar"
	 id="@Id"
	 @attributes="UserAttrs">
	<div class="hpvt-hdr" role="tablist">
		@foreach (var pv in _items)
		{
			<button class="@pv.CssClass"
				type="button"
				role="tab"
				aria-selected="@(pv == _current).ToBootStrap()"
				tabindex="@(pv == _current ? 0 : -1)"
				id="@Id"
				@attributes="UserAttrs"
				@onclick="async () => await HandleOnClickAsync(pv)">
				@if (pv.Header is not null)
				{
					<span>@pv.Header</span>
				}
				else
				{
					<span>@pv.Title</span>
				}
			</button>
		}
	</div>

	@if (TitleOnly is false)
	{
		<div class="hpvt-ctx"
		 role="tabpanel"
		 aria-hidden="false"
		 aria-labelledby="@Id">
			@(_current?.Content ?? _current?.ChildContent)
		</div>
	}
</div>

@code {
	[Parameter] public ComponentOverflow Overflow { get; set; }
	[Parameter] public ComponentPosition Position { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public PivotLayout Layout { get; set; }

	[Parameter] public bool TitleOnly { get; set; }

	protected override string RootClass => "hpvt";

	//
	protected override void OnComponentClass(CssSupp css)
	{
		css
			.Add(GetSizeCss())
			.Add(GetLayoutCss())
			.Add(GetOverflowCss())
			.Add(GetPositionCss());
	}

	//
	protected override Task OnItemAddedAsync(DuPivot item)
	{
		if (item == _current)
			item.Selected = true;

		return Task.CompletedTask;
	}

	//
	protected override Task<bool> OnItemSelectedAsync(DuPivot? item, DuPivot? previous)
	{
		if (previous is not null)
			previous.Selected = false;

		if (item is not null)
			item.Selected = true;

		return Task.FromResult(true);
	}

	//
	protected Task HandleOnClickAsync(DuPivot pivot) =>
		SelectItemAsync(pivot);

	//
	private string? GetSizeCss()
	{
		return Size switch
		{
			ComponentSize.Medium or
				ComponentSize.Small => "hpvt-nm",
			ComponentSize.Large => "hpvt-lg",
			_ => null
		};
	}

	//
	private string? GetLayoutCss()
	{
		return Layout switch
		{
			PivotLayout.Flat => "hpvt-lnk",
			PivotLayout.Box => "hpvt-box",
			_ => null
		};
	}

	//
	private string? GetOverflowCss()
	{
		return Overflow switch
		{
			ComponentOverflow.None => null,
			ComponentOverflow.Menu => null,
			ComponentOverflow.Scroll => "hpvt-scrl",
			_ => null
		};
	}

	//
	private string? GetPositionCss()
	{
		return Position switch
		{
			ComponentPosition.Top => "flex-flow-column",
			ComponentPosition.Right => "flex-flow-row-reverse",
			ComponentPosition.Bottom => "flex-flow-column-reverse",
			ComponentPosition.Left => "flex-flow-row",
			_ => null
		};
	}
}
