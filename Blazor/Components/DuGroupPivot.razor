@inherits DuComponentParent

<div @ref="RootElement"
	 class="@CssClass"
	 role="toolbar"
	 aria-label="@AriaLabel"
	 id="@Id"
	 @attributes="UserAttrs">
	<CascadingValue Value="this" IsFixed="true">
		<div class="hpvt-hdr" role="tablist">
			@ChildContent
		</div>
	</CascadingValue>
	@if (TitleOnly is false)
	{
		<div class="hpvt-ctx"
		 role="tabpanel"
		 aria-hidden="false"
		 aria-labelledby="@Id">
			@(_selected?.Content ?? _selected?.ChildContent)
		</div>
	}
</div>

@code {
	[Parameter] public ComponentOverflow Overflow { get; set; }
	[Parameter] public ComponentPosition Position { get; set; }
	[Parameter] public ComponentSize Size { get; set; }
	[Parameter] public PivotLayout Layout { get; set; }

	[Parameter] public bool TitleOnly { get; set; }
	[Parameter] public string? AriaLabel { get; set; }

	[Parameter] public EventCallback<PivotChangeEvent> OnPivotChange { get; set; }

	protected override string RootClass => "hpvt";

	private readonly List<DuPivot> _pivots = new();
	private DuPivot? _selected;

	//
	protected override void OnComponentClass(CssSupp css)
	{
		css
			.Add(GetSizeCss())
			.Add(GetLayoutCss())
			.Add(GetOverflowCss())
			.Add(GetPositionCss());
	}

	//
	public void AddPivot(DuPivot pivot)
	{
		if (Disabled)
			pivot.Disabled = true;

		if (_selected is null)
		{
			pivot.SetSelected(true);

			_selected = pivot;
			StateHasChanged();
		}

		_pivots.Add(pivot);
	}

	//
	public void RemovePivot(DuPivot pivot)
	{
		// 근데 이거 해야함? 어짜피 dispose인데
		_pivots.Remove(pivot);
	}

	//
	public async Task SelectPivot(DuPivot pivot)
	{
		var prev = _selected;

		_selected?.SetSelected(false);
		pivot.SetSelected(true);

		_selected = pivot;

		StateHasChanged();

		await InvokeOnPivotChange(new PivotChangeEvent()
			{
				Current = pivot,
				Previous = prev
			});
	}

	//
	public void SelectPivot(string id) 
	{
		var pivot = _pivots.FirstOrDefault(x => x.Id == id);

		if (pivot == null || pivot == _selected || pivot.Disabled)
			return;

		_ = SelectPivot(pivot);
	}

	//
	protected virtual Task InvokeOnPivotChange(PivotChangeEvent pivot)
	{
		return OnPivotChange.InvokeAsync(pivot);
	}

	//
	private string? GetSizeCss()
	{
		return Size switch
		{
			ComponentSize.Medium or
				ComponentSize.Small => "hpvt-nm",
			ComponentSize.Large => "hpvt-lg",
			_ => null
		};
	}

	//
	private string? GetLayoutCss()
	{
		return Layout switch
		{
			PivotLayout.Flat => "hpvt-lnk",
			PivotLayout.Box => "hpvt-box",
			_ => null
		};
	}

	//
	private string? GetOverflowCss()
	{
		return Overflow switch
		{
			ComponentOverflow.None => null,
			ComponentOverflow.Menu => null,
			ComponentOverflow.Scroll => "hpvt-scrl",
			_ => null
		};
	}

	//
	private string? GetPositionCss()
	{
		return Position switch
		{
			ComponentPosition.Top => "flex-flow-column",
			ComponentPosition.Right => "flex-flow-row-reverse",
			ComponentPosition.Bottom => "flex-flow-column-reverse",
			ComponentPosition.Left => "flex-flow-row",
			_ => null
		};
	}
}
