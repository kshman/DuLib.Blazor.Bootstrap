@inherits DuGroupBase

<div @ref="RootElement"
	 @attributes="UserAttributes"
	 style="@CssStyle.Result"
	 class="@CssClass.Result"
	 role="toolbar"
	 aria-label="@AriaLabel"
	 id="@Id">
	<CascadingValue Value="this" IsFixed="true">
		<div class="hpvt-hdr" role="tablist">
			@ChildContent
		</div>
	</CascadingValue>
	@if (TitleOnly is false)
	{
		<div class="hpvt-ctx"
		 role="tabpanel"
		 aria-hidden="false"
		 aria-labelledby="@Id">
			@(_selected?.Content ?? _selected?.ChildContent)
		</div>
	}
</div>

@code {
	[Parameter]
	public ComponentOverflow Overflow
	{
		get => _overflow;
		set
		{
			if (_overflow == value) return;
			_overflow = value;
			CssClass.Invalidate();
		}
	}

	[Parameter]
	public ComponentPosition Position
	{
		get => _position;
		set
		{
			if (_position == value) return;
			_position = value;
			CssClass.Invalidate();
		}
	}

	[Parameter]
	public ComponentSize TitleSize
	{
		get => _title_size;
		set
		{
			if (_title_size == value) return;
			_title_size = value;
			CssClass.Invalidate();
		}
	}

	[Parameter]
	public PivotTitleLayout TitleLayout
	{
		get => _title_layout;
		set
		{
			if (_title_layout == value) return;
			_title_layout = value;
			CssClass.Invalidate();
		}
	}

	[Parameter]
	public bool TitleOnly { get; set; }

	[Parameter]
	public string? AriaLabel { get; set; }

	[Parameter]
	public EventCallback<PivotChangeEvent> OnPivotChange { get; set; }

	protected override string RootClass => RootClasses.hpvt;

	private readonly List<DuPivot> _pivots = new();
	private DuPivot? _selected;

	private ComponentOverflow _overflow;
	private ComponentPosition _position;
	private ComponentSize _title_size;
	private PivotTitleLayout _title_layout;

	//
	protected override void OnComponentClass()
	{
		CssClass
			.Add(GetTitleSizeCss)
			.Add(GetTitleLayoutCss)
			.Add(GetOverflowCss)
			.Add(GetPositionCss);
	}

	//
	public void AddPivot(DuPivot pivot)
	{
		if (Enabled is false)
			pivot.Enabled = false;

		if (_selected is null)
		{
			pivot.SetSelected(true);

			_selected = pivot;
			StateHasChanged();
		}

		_pivots.Add(pivot);
	}

	//
	public void RemovePivot(DuPivot pivot)
	{
		// 근데 이거 해야함? 어짜피 dispose인데
		_pivots.Remove(pivot);
	}

	//
	public async void SelectPivot(DuPivot pivot)
	{
		var prev = _selected;

		_selected?.SetSelected(false);
		pivot.SetSelected(true);

		_selected = pivot;

		StateHasChanged();

		await InvokeOnLinkClick(new PivotChangeEvent()
			{
				Pivot = pivot,
				Previous = prev
			});
	}

	//
	public void SelectPivot(string id) 
	{
		var pivot = _pivots.FirstOrDefault(x => x.Id == id);

		if (pivot == null || pivot == _selected || !pivot.Enabled)
			return;

		SelectPivot(pivot);
	}

	//
	protected virtual Task InvokeOnLinkClick(PivotChangeEvent pivot)
	{
		return OnPivotChange.InvokeAsync(pivot);
	}

	//
	private string? GetTitleSizeCss()
	{
		return TitleSize switch
		{
			ComponentSize.Medium or
				ComponentSize.Small => "hpvt-nm",
			ComponentSize.Large => "hpvt-lg",
			_ => null
		};
	}

	//
	private string? GetTitleLayoutCss()
	{
		return TitleLayout switch
		{
			PivotTitleLayout.Flat => "hpvt-lnk",
			PivotTitleLayout.Box => "hpvt-box",
			_ => null
		};
	}

	//
	private string? GetOverflowCss()
	{
		return Overflow switch
		{
			ComponentOverflow.None => null,
			ComponentOverflow.Menu => null,
			ComponentOverflow.Scroll => "hpvt-scrl",
			_ => null
		};
	}

	//
	private string? GetPositionCss()
	{
		return Position switch
		{
			ComponentPosition.Top => "flex-flow-column",
			ComponentPosition.Right => "flex-flow-row-reverse",
			ComponentPosition.Bottom => "flex-flow-column-reverse",
			ComponentPosition.Left => "flex-flow-row",
			_ => null
		};
	}
}
